type ContestData = record {
  status : opt Status;
  contest_description : text;
  contest_songs : opt vec record { nat32; LobbySongData };
  contest_results : opt vec ContestResultData;
  jury : opt vec principal;
  added_by : principal;
  optional_stages : vec record { OptionalStageType; bool };
  price_pool_init : nat64;
  created_at : nat64;
  lobby_songs : opt vec record { nat32; LobbySongData };
  total_votes : opt nat32;
  contest_title : text;
  songs_in_lobby_amount : opt nat32;
};
type ContestError = variant {
  UpdateError : UpdateError;
  DuplicateContest;
  KeyNotFound;
};
type ContestResultData = record {
  closed_by : opt principal;
  votes_average : float32;
  top_voters : vec Vote;
  votes_amount : nat32;
  position : nat32;
  finished_at : opt text;
};
type CreateContest = record {
  contest_description : text;
  contest_title : text;
};
type LobbySongData = record {
  added_by : principal;
  jury_votes : vec record { principal; Vote };
};
type OptionalStageType = variant { Lobby; Jury };
type Result = variant {
  Ok : vec record { nat64; ContestData };
  Err : ContestError;
};
type Result_1 = variant { Ok : ContestData; Err : ContestError };
type Result_2 = variant { Ok; Err : ContestError };
type Result_3 = variant { Ok : nat64; Err : ContestError };
type Result_4 = variant { Ok; Err : text };
type Status = variant { Stopped; InProgress; Canceled };
type UpdateError = record { message : text };
type Vote = record { vote : nat8 };
service : {
  contest_get_get_contest : () -> (Result) query;
  contest_get_get_contest_by_id : (nat64) -> (Result_1) query;
  contest_update_add_jury_vote : (nat64, nat32, Vote) -> (Result_2);
  contest_update_add_public_vote : (nat64, nat32, Vote) -> (Result_2);
  contest_update_add_song_to_lobby : (nat64, nat32) -> (Result_2);
  contest_update_create_contest : (CreateContest) -> (Result_3);
  contest_update_finalize_contest : (nat64) -> (Result_2);
  contest_update_remove_contest : (nat64) -> (Result_2);
  contest_update_update_stage : (nat64, Status) -> (Result_2);
  management_get_check_user_permission : (text) -> (bool) query;
  management_update_add_restricted_method_api : (text, vec text) -> (Result_4);
  management_update_add_role : (text, principal) -> (Result_4);
  management_update_remove_role_api : (text, principal) -> (Result_4);
  management_update_update_contest_stage : (text, nat64) -> (Result_4);
}
