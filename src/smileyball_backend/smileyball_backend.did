type ContestData = record {
  contest_description : text;
  contest_songs : opt vec record { nat32; ContestSongData };
  contest_title : text;
};
type ContestError = variant { DuplicateContest; KeyNotFound };
type ContestSongData = record {
  added_by : principal;
  jury_votes : vec record { principal; Vote };
};
type Result = variant { Ok : nat64; Err : ContestError };
type Result_1 = variant { Ok : ContestData; Err : ContestError };
type Result_2 = variant {
  Ok : vec record { nat64; ContestData };
  Err : ContestError;
};
type Result_3 = variant { Ok; Err : ContestError };
type Vote = record { vote : nat8 };
service : {
  create_contest : (ContestData) -> (Result);
  get_contest_by_id : (nat64) -> (Result_1) query;
  get_contests : () -> (Result_2) query;
  remove_contest : (nat64) -> (Result_3);
  update_contest : (nat64, ContestData) -> (Result_3);
}
