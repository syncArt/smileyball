type ContestData = record {
  status : opt Status;
  contest_description : text;
  contest_songs : opt vec record { nat32; ContestSongData };
  contest_results : opt vec ContestResultData;
  jury : opt vec principal;
  added_by : principal;
  price_pool_init : nat64;
  created_at : nat64;
  lobby_songs : opt vec record { nat32; LobbySongData };
  total_votes : opt nat32;
  contest_title : text;
  songs_in_lobby_amount : opt nat32;
};
type ContestError = variant { DuplicateContest; KeyNotFound };
type ContestResultData = record {
  closed_by : opt principal;
  votes_average : float32;
  top_voters : vec Vote;
  votes_amount : nat32;
  position : nat32;
  finished_at : opt text;
};
type ContestSongData = record {
  added_by : principal;
  jury_votes : vec record { principal; Vote };
};
type LobbySongData = record { added_by : principal; jury_votes : vec Vote };
type Result = variant { Ok : nat64; Err : ContestError };
type Result_1 = variant { Ok : ContestData; Err : ContestError };
type Result_2 = variant {
  Ok : vec record { nat64; ContestData };
  Err : ContestError;
};
type Result_3 = variant { Ok; Err : ContestError };
type Status = variant { Stopped; InProgress; Canceled };
type Vote = record { vote : nat8 };
service : {
  create_contest : (ContestData) -> (Result);
  get_contest_by_id : (nat64) -> (Result_1) query;
  get_contests : () -> (Result_2) query;
  remove_contest : (nat64) -> (Result_3);
  update_contest : (nat64, ContestData) -> (Result_3);
}
type ContestData = record {
  status : opt Status;
  contest_description : text;
  contest_songs : opt vec record { nat32; ContestSongData };
  contest_results : opt vec ContestResultData;
  jury : opt vec principal;
  added_by : principal;
  price_pool_init : nat64;
  created_at : nat64;
  lobby_songs : opt vec record { nat32; LobbySongData };
  total_votes : opt nat32;
  contest_title : text;
  songs_in_lobby_amount : opt nat32;
};
type ContestError = variant { DuplicateContest; KeyNotFound };
type ContestResultData = record {
  closed_by : opt principal;
  votes_average : float32;
  top_voters : vec Vote;
  votes_amount : nat32;
  position : nat32;
  finished_at : opt text;
};
type ContestSongData = record {
  added_by : principal;
  jury_votes : vec record { principal; Vote };
};
type LobbySongData = record { added_by : principal; jury_votes : vec Vote };
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : nat64; Err : ContestError };
type Result_2 = variant { Ok : ContestData; Err : ContestError };
type Result_3 = variant {
  Ok : vec record { nat64; ContestData };
  Err : ContestError;
};
type Result_4 = variant { Ok; Err : ContestError };
type Status = variant { Stopped; InProgress; Canceled };
type Vote = record { vote : nat8 };
service : {
  add_restricted_method_api : (text, vec text) -> (Result);
  add_role : (text, principal) -> (Result);
  check_user_permission : (text) -> (bool) query;
  create_contest : (ContestData) -> (Result_1);
  get_contest_by_id : (nat64) -> (Result_2) query;
  get_contests : () -> (Result_3) query;
  remove_contest : (nat64) -> (Result_4);
  remove_role_api : (text, principal) -> (Result);
  update_contest : (nat64, ContestData) -> (Result_4);
  update_contest_stage : (text, nat64) -> (Result);
}
