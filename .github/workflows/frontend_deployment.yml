name: Deploy Smileyball Frontend

on:
  workflow_dispatch:

jobs:
  deploy-smileyball-frontend:
    runs-on: ubuntu-latest
    environment: production
    env:
      SMILEYBALL_FRONTEND_CANISTER_ID: ${{ secrets.SMILEYBALL_FRONTEND_CANISTER_ID }}
      WALLET_CANISTER_ID: ${{ secrets.WALLET_CANISTER_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install node_modules
        run: npm install

      - name: Install dfx
        uses: dfinity/setup-dfx@main

      - name: Confirm successful installation
        run: dfx --version

      - name: Check Rust and Cargo versions
        run: |
          rustc --version
          cargo --version

      - name: Install wasm32-unknown-unknown target for Rust
        run: rustup target add wasm32-unknown-unknown

      - name: Install Smileyball Identity
        env:
          DFX_DEPLOY_KEY: ${{ secrets.DFX_DEPLOY_KEY }}
        run: |
          key_pem=$(mktemp)
          printenv "DFX_DEPLOY_KEY" > "$key_pem"
          dfx identity import --disable-encryption --force smileyball "$key_pem"
          rm "$key_pem"
          dfx identity use smileyball

      - name: Check If have permissions
        run: dfx canister --network ic status ${{ env.SMILEYBALL_FRONTEND_CANISTER_ID }}

      - name: Start DFX server in the background
        run: |
          nohup dfx start --background --clean &
          # Wait until DFX is ready
          until dfx ping; do sleep 1; done

      - name: Pull deps
        run: dfx deps pull

      - name: Init deps arguments
        run: dfx deps init

      - name: Create Canisters
        run: dfx canister create --all

      - name: Deploy deps
        run: dfx deps deploy

      - name: Generate definitions for deps [required to build local]
        run: dfx generate user_identity

      - name: Generate definitions for backend
        run: dfx generate smileyball_backend

      - name: Build local [required to generate all definitions]
        run: dfx build

      - name: Generate all definitions
        run: dfx generate

      - name: Build all canisters including dependencies for mainnet
        run: dfx build --ic

      - name: Verify Current Directory
        run: |
          echo "Current working directory:"
          pwd
          echo "Listing all files and directories in the current location:"
          ls -la

      - name: Check for .dfx Folder
        run: |
          if [ -d ".dfx" ]; then
            echo ".dfx folder exists."
            ls -la .dfx  # List contents of .dfx to verify structure
          else
            echo ".dfx folder does not exist."
            exit 1  # Fail the workflow if .dfx does not exist
          fi

      - name: Verify Frontend Wasm File Exists
        run: |
          if [ -f ".dfx/ic/canisters/smileyball_frontend/smileyball_frontend.wasm.gz" ]; then
            echo "Frontend Wasm file exists:"
            ls -la .dfx/ic/canisters/smileyball_frontend/
          else
            echo "Frontend Wasm file does not exist in .dfx/ic/canisters/smileyball_frontend/"
            exit 1  # Fail the workflow if the Wasm file does not exist
          fi

      - name: Deploy Smileyball Frontend on ICP
        run: |
          dfx canister install smileyball_frontend --network ic --mode upgrade

      - name: Stop DFX server and clean up processes
        run: |
          dfx stop || true 
          pkill -f 'dfx start' || true 
          pkill -f 'dfx replica' || true
      - name: Clean up .dfx folder
        run: |
          rm -rf .dfx